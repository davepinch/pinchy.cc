
#
# Script to migrate from Jekyll to Hugo
#
# - Stop the Hugo server before running this script.
# - Run this script from the root of the project.
# - Since files get deleted, you must run revert.ps1 instead of running this script twice.
#
# Thanks to the following sites for documentation and tips:
#
# https://gohugo.io/
# https://www.stackbit.com/blog/advanced-hugo-templates
# https://www.regisphilibert.com/blog/2018/04/hugo-optmized-relationships-with-related-content/

#
# Delete files that are not imported over
#
Remove-Item -Path "_config.yml"
Remove-Item -Path "_layouts" -Recurse -Force
Remove-Item -Path "_pages" -Recurse -Force
Remove-Item -Path "assets\css\styles.scss"
Remove-Item -Path "Gemfile"
Remove-Item -Path "index.html"

#
# Delete the cached Jekyll output
#
If (Test-Path -Path "_site") {
  Remove-Item -Path "_site" -Recurse -Force
}

#
# .gitignore (overwrite)
#
Set-Content -Path ".gitignore" -Value @'
.hugo_build.lock
/resources/
'@

#
# _sass/ (move to assets/sass)
#
if (Test-Path -Path "_sass") {
  if (Test-Path -Path "assets\sass") {
    if (!(Get-ChildItem -Path "assets\sass")) {
      Remove-Item -Path "assets\sass"
    }
  }
  Move-Item -Path "_sass" -Destination "assets\sass"
}

#
# assets/css/ (delete if empty)
#
if (Test-Path -Path "assets\css") {
  if (!(Get-ChildItem -Path "assets\css")) {
    Remove-Item -Path "assets\css"
  }
}


#
# collections/ (rename to content)
#
if (Test-Path -Path "collections") {
  if (Test-Path -Path "content") {
    if (!(Get-ChildItem -Path "content" -Recurse -File)) {
      Remove-Item -Path "content" -Recurse -Force
    }
  }

  Move-Item -Path "collections" -Destination "content"
}

#
# content/_* (remove prefix)
#
# In the content directory, rename each subdirectory that has an
# understore prefix to remove the underscore
Get-ChildItem -Path "content" -Directory | ForEach-Object {
  $dir = $_
  if ($dir.Name.StartsWith("_")) {
    $newName = $dir.Name.Substring(1)
    Rename-Item -Path $dir.FullName -NewName $newName
  }
}

#
# content/*.md (replace permalink with url)
#
Get-ChildItem -Path "content" -Filter "*.md" -Recurse | ForEach-Object {
  $file = $_
  $content = Get-Content -Path $file.FullName
  $content = $content -replace "permalink: ", "url: "
  Set-Content -Path $file.FullName -Value $content
} 


#
# content/_index.md (create)
#
Set-Content -Path "content/_index.md" -Value @"
---
title: "pinchy.cc"
---
hello world
"@

#
# content/camera-roll/**/.md (rename index files and move assets)
#
(Get-ChildItem -Path "content\camera-roll" -Filter "*.md" -Recurse) | ForEach-Object {
  
  $file = $_

  # load the file as a string
  $content = Get-Content -Path $file.FullName

  # remove full asset paths as later assets will be moved to this folder
  #
  # Example:
  #   picture: /assets/camera-roll/2020/2020-01-01-foo-bar.jpg
  # becomes
  #   picture: 2020-01-01-foo-bar.jpg
  #
  $content = $content -replace "picture: .*\/", "picture: "
  $content = $content -replace "thumbnail: .*\/", "thumbnail: "
  Set-Content -Path $file.FullName -Value $content

  # Convert index files
  if ($file.BaseName -eq $file.Directory.BaseName) {
    
    Rename-Item -Path $file.FullName -NewName "index.md"

    # Define a string that matches the old directory except \content\ is replaced with \assets\
    $assetDir = $file.DirectoryName -replace "content", "assets"

    # Move all files from the asset directory to the new directory
    Move-Item -Path "$assetDir\*" -Destination $file.DirectoryName

    # Delete the old asset directory
    Remove-Item -Path $assetDir
  }
}

#
# go.mod (create)
#
Set-Content -Path "go.mod" -Value @"
module github.com/davepinch/pinchy.cc
go 1.21
"@

#
# hugo.yaml (create)
#
Set-Content -Path "hugo.yaml" -Value @'
baseURL: https://pinchy.cc/
defaultContentLanguage: en
disableKinds:
  # Disable taxonomy pages generated by Hugo for tags and categories
  - taxonomy
  - term
permalinks:
  about: /:filename/
  camera-roll: /:slug/
  cues: /:filename/
  fragments: /:filename/
  generative-works: /:filename/
  posts: /:slug/
  reality-checks: /:filename/
  spoken: /:filename/
  tasks: /:filename/
  the-advertisement: /:filename/
  the-simulation: /:filename/
  topics: /:filename/
'@

#
# layouts/ (create)
#
If (!(Test-Path -Path "layouts")) {
  New-Item -Path "layouts" -ItemType Directory
}

#
# layouts/_default/ (create)
#
If (!(Test-Path -Path "layouts\_default")) {
  New-Item -Path "layouts\_default" -ItemType Directory
}

#
# layouts/_default/baseof.html (create)
#
Set-Content -Path "layouts\_default\baseof.html" -Value @'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{{ .Page.Title }}</title>
{{ $style := resources.Get "sass/cc.scss" | resources.ToCSS | resources.Minify }}
    <link rel="stylesheet" href="{{ $style.Permalink }}">
    <link rel="shortcut icon" type="image/x-icon" href="/favicon/favicon.ico"/>
</head>
<body>
{{ block "main" . }}
{{ end }}
{{ partialCached "footer.html" . }}
</body>
</html>
'@

#
# layouts/_default/cc-card.html (create)
#
Set-Content -Path "layouts\_default\cc-card.html" -Value @'
<article class="cc-card cc-{{ .Type }}-card">
    <a class="cc-url" href="{{ .Permalink }}">
        <span class="cc-title">{{ .Params.title | markdownify }}</span>
    </a>
</article>
'@

#
# layouts/_default/cc-debug.html (create)
#
Set-Content -Path "layouts\_default\cc-debug.html" -Value @'
<h2>Debug</h2>
<table>
    {{ range $k, $v := .Params -}}
    <tr>
      <th>{{ $k }}</th>
      <th>{{ (printf "%T" $v) }}</th>
      <td>{{ $v }}</td>
    </tr>
    {{- end }}
</table>
'@

#
# layouts/_default/cc-heading.html (create)
#
Set-Content -Path "layouts\_default\cc-heading.html" -Value @'
<h2 class="cc-heading cc-{{ .Type }}-heading">
    <span class="cc-title">{{ .Params.title | markdownify }}</span>
</h2>
'@

#
# layouts/_default/cc-inline.html (create)
#
Set-Content -Path "layouts\_default\cc-inline.html" -Value @'
<span class="cc-inline cc-{{ .Type }}-inline">
    <a class="cc-url" href="{{ .Permalink }}">
        <span class="cc-title">{{ .Params.title | markdownify }}</span>
    </a>
</span>
'@

#
# layouts/_default/cc-masthead.html (create)
#
Set-Content -Path "layouts\_default\cc-masthead.html" -Value @'
{{ $title := .Params.title | markdownify }}
<header class="cc-masthead cc-{{ .Type }}-masthead">
    <h1 class="cc-title">
    {{ if .Params.next }}
        {{ $next := partial "cc-get-first" .Params.next }}
        {{ if $next }}
          <a href="{{ $next.RelPermalink }}">{{ $title | markdownify }}</a>
        {{ else }}
          {{ .Params.title | markdownify }}
        {{ end }}
    {{ else }}
        {{ .Params.title | markdownify }}
    {{ end }}
    </h1>
    {{ with .Params.website -}}
    <a href="{{ . }}" class="cc-website">{{ . }}</a>
    {{- end }}  
</header>
'@

#
# layouts/_default/home.html (create)
#
Set-Content -Path "layouts\_default\home.html" -Value @'
{{ define "main" }}
{{ .Content }}
<ul>
{{ $pages := .Site.RegularPages -}}
{{ $pages = $pages | shuffle | first 13 -}}
{{ range $pages }}
    <li>{{- .Render "cc-card" -}}</li>
{{ end -}}
</ul>
{{ end }}
'@

#
# layouts/_default/list.html (create)
#
Set-Content -Path "layouts\_default\list.html" -Value @'
{{ define "main" }}
{{ .Content }}
{{ end }}
'@

#
# layouts/_default/single.html (create)
#
Set-Content -Path "layouts\_default\single.html" -Value @'
{{ define "main" }}
{{ .Render "cc-masthead" }}

<!-- date -->
{{ if .Date }}
<p>
    <em class="cc-date">{{ .Date.Format "Monday, January 2, 2006" }}</em>
</p>
{{ end }}

<!-- content -->
{{ .Content }}

<!-- tagged -->
{{ $tagged := partialCached "cc-groupby-tags" . }}
{{ $pages := index $tagged .Title }}
{{ if $pages }}
<ul>{{ range $pages }}<li>{{ .Render "cc-card" }}</li>{{ end }}</ul>
{{ end }}

<!-- sections -->
{{ $skip := slice
    "attribution"
    "date"
    "draft"
    "hashtag"
    "iscjklanguage"
    "lastmod"
    "picture"
    "publish"
    "publishdate"
    "published"
    "quote"
    "snippets"
    "thumbnail"
    "title"
    "type"
    "url"
    "website" -}}
{{ range $k, $v := .Params -}}
  {{ if not (in $skip $k) -}}
    {{ partial "cc-section" (dict "key" $k "value" $v) }}
  {{ end -}}
{{- end }}

{{ end }}
'@

#
# layouts/404.html (create)
#
Set-Content -Path "layouts\404.html" -Value @'
{{ define "main" }}
<p>Sorry, but this page hasn't been constructed yet.</p>
<a href='{{ "" | relURL }}'>Go Home</a>
{{ end }}
'@

#
# layouts/button/ (create)
#
New-Item -Path "layouts\button" -ItemType Directory

#
# layouts/button/cc-card.html (create)
#
Set-Content -Path "layouts\button\cc-card.html" -Value @'
<article class="cc-card cc-button-card">
    <form method="get" action="{{ .Params.target }}">
        <button type="submit">
            <span class="cc-title">{{ .Params.title | markdownify }}</span>
        </button>
    </form>
</article>
'@

#
# layouts/button/cc-inline.html (create)
#
Set-Content -Path "layouts\button\cc-inline.html" -Value @'
<span class="cc-inline cc-button-inline">
    <form method="get" action="{{ .Params.target }}">
        <button type="submit">
            <span class="cc-title">{{ .Params.title | markdownify }}</span>
        </button>
    </form>
</span>
'@

#
# layouts/button/cc-masthead.html (create)
#
Set-Content -Path "layouts\button\cc-masthead.html" -Value @'
<header class="cc-masthead cc-button-masthead">
    <form method="get" action="{{ .Params.target }}">
      <button type="submit">
          <span class="cc-title">{{ .Params.title | markdownify }}</span>
      </button>
    </form>
</header>
'@

#
# layouts/partials/ (create)
#
If (!(Test-Path -Path "layouts\partials")) {
  New-Item -Path "layouts\partials" -ItemType Directory
}

#
# layouts/partials/cc-card-for.html (create)
#
Set-Content -Path "layouts\partials\cc-card-for.html" -Value @'
{{ with partialCached "cc-get" . . }}
{{ .Render "cc-card"}}
{{ else }}
<article class="cc-card cc-fallback-card">
    <span class="cc-title">{{ . | markdownify }}</span>
</article>
{{ end }}
'@

#
# layouts/partials/cc-get.html (create)
#
Set-Content -Path "layouts\partials\cc-get.html" -Value @'
{{ $groups := partialCached "cc-groupby-title" . }}
{{ $titled := index $groups (string .) }}
{{ return index $titled 0 }}
'@

#
# layouts/partials/cc-get-first.html (create)
#
Set-Content -Path "layouts\partials\cc-get-first.html" -Value @'
{{ $title := . }}
{{ $type := printf "%T" . }}
{{ if eq $type "[]string" }}
    {{ $title = index . 0 }}
{{ end }}
{{ return partialCached "cc-get" $title $title }}
'@

#
# layouts/partials/cc-groupby-tags.html (create)
#
Set-Content -Path "layouts\partials\cc-groupby-tags.html" -Value @'
{{ $group := dict }}
{{ range $page := site.RegularPages }}
    {{ range $tag := $page.Params.tags }}
        {{ if not $tag }}
            {{ errorf "Page %q has nil tag" $page.Path }}
            {{ continue }}
        {{ end}}
        {{ $pages := index $group $tag }}
        {{ if $pages }}
            {{ $pages = $pages | append $page }}
        {{ else }}
            {{ $pages = slice $page }}
        {{ end }}
        {{ $group = merge $group (dict $tag $pages) }}
    {{ end }}
{{ end }}
{{ return $group }}
'@

#
# layouts/partials/cc-groupby-title.html (create)
#
Set-Content -Path "layouts\partials\cc-groupby-title.html" -Value @'
{{ $lookup := dict }}
{{ range site.RegularPages.GroupBy "Title" }}
  {{ $lookup = $lookup | merge (dict .Key .Pages) }}
{{ end }}
{{ return $lookup }}
'@

#
# layouts/partials/cc-inline-for.html (create)
#
Set-Content -Path "layouts\partials\cc-inline-for.html" -Value @'
{{ with partialCached "cc-get" . . }}
{{ .Render "cc-inline"}}
{{ else }}
<span class="cc-inline">{{ . | markdownify }}</span>
{{ end }}
'@

#
# layouts/partials/cc-random-tagged.html (create)
#
Set-Content -Path "layouts\partials\cc-random-tagged.html" -Value @'
{{ $groups := partialCached "cc-groupby-tags" . }}
{{ $pages := index $groups (string .) }}
{{ if $pages }}
    {{ $pages = $pages | shuffle }}
{{ end }}
{{ return index $pages 0 }}
'@

#
# layouts/partials/cc-section.html (create)
#
Set-Content -Path "layouts\partials\cc-section.html" -Value @'
<section class="cc-section cc-{{ .key }}-section">
  <header>
    <h1>
        <span class="cc-key">{{ .key }}</span>
    </h1>
  </header>
  {{ $literals := slice "string" "float64" "bool" }}
  {{ $type := (printf "%T" .value) }}
  <ul>
  {{ if in $literals $type }}
    <li>{{ partialCached "cc-inline-for" .value .value}}</li>
  {{ else if eq $type "[]string" }}
    {{ range .value }}
    <li>{{ partialCached "cc-inline-for" . . }}</li>
    {{ end }}
  {{ else }}
    <li>{{ $type }}</li>
  {{ end }}
  </ul>
</section>
'@

#
# layouts/partials/cc-snippet.html (create)
#
Set-Content -Path "layouts\partials\cc-snippet.html" -Value @'
<article class="cc-snippet">
<em>{{ .snippet | markdownify }}</em>
</article>
'@

#
# layouts/partials/footer.html (create)
#
Set-Content -Path "layouts\partials\footer.html" -Value @'
<hr />
<footer class="cc-footer">
  <menu>
    <li>
      <a href="/index.html">home</a>
    </li>
    <li>
      <a href="/about-me/">about</a>
    </li>
    <li>
      <a href="/privacy-policy/">privacy</a>
    </li>
    <li>
      <a href="/the-advertisement/">the advertisement</a>
    </li>
  </menu>
</footer>
'@

#
# layouts/picture/ (create)
#
If (!(Test-Path -Path "layouts\picture")) {
  New-Item -Path "layouts\picture" -ItemType Directory
}

#
# layouts/picture/cc-masthead.html (create)
#
Set-Content -Path "layouts\picture\cc-masthead.html" -Value @'
<header class="cc-masthead cc-picture-masthead">
  {{ $image := .Resources.Get .Params.picture -}}
  {{ if $image -}}
  <img class="cc-picture"
       src="{{ $image.RelPermalink }}"
       title="{{ .Params.title }}"
       width="100%" />
  {{- end }}
  <h1 class="cc-title">{{ .Params.title | markdownify }}</h1>
</header>
'@


#
# layouts/quote/ (create)
#
If (!(Test-Path -Path "layouts\quote")) {
  New-Item -Path "layouts\quote" -ItemType Directory
}

#
# layouts/quote/cc-card.html (create)
#
Set-Content -Path "layouts\quote\cc-card.html" -Value @'
{{ $quote := .Params.quote | default .Params.title }}
{{ $marks := hasPrefix $quote '"' }}
<article class="cc-card cc-{{ .Type }}-card">
    <a class="cc-url" href="{{ .Permalink }}">
        <q class="cc-quote{{ if not $marks }} cc-missing-quotes{{end}}">{{ $quote }}</q>
    </a>
</article>
'@

#
# layouts/quote/cc-inline.html (create)
#
Set-Content -Path "layouts\quote\cc-inline.html" -Value @'
{{ $quote := .Params.quote | default .Params.title -}}
{{ $marks := hasPrefix $quote '"' -}}
<span class="cc-inline cc-{{ .Type }}-inline">
    {{ if .Params.attribution -}}
    <q class="cc-quote{{ if not $marks }} cc-missing-quotes{{end}}">{{ $quote }}</q>
    <a class="cc-url" href="{{ .Permalink }}">
        <span class="cc-attribution">{{ .Params.attribution | markdownify }}</span>
    </a>
    {{ else -}}
    <a class="cc-url" href="{{ .Permalink }}">
        <q class="cc-quote{{ if not $marks }} cc-missing-quotes{{end}}">{{ $quote }}</q>
    </a>
    {{ end }}
</span>
'@

#
# layouts/quote/cc-masthead.html (create)
#
Set-Content -Path "layouts\quote\cc-masthead.html" -Value @'
{{ $quote := .Params.quote | default .Params.title }}
{{ $marks := hasPrefix $quote '"' }}
<header class="cc-masthead cc-{{ .Type }}-masthead">
  <blockquote>
    <p class="cc-quote{{ if not $marks }} cc-missing-quotes{{end}}">{{ $quote }}</p>
    {{ with .Params.attribution -}}
    <footer class="cc-attribution">
      {{ . | markdownify }}
    </footer>
    {{- end }}
  </blockquote>
</header>
'@

#
# layouts/shortcodes/ (create)
#
If (!(Test-Path -Path "layouts\shortcodes")) {
  New-Item -Path "layouts\shortcodes" -ItemType Directory
}

#
# layouts/shortcodes/rawhtml.html (create)
#
Set-Content -Path "layouts\shortcodes\rawhtml.html" -Value @'
{{/* https://anaulin.org/blog/hugo-raw-html-shortcode/ */}}
{{- .Inner}}
'@

#
# layouts/snippet/ (create)
#
If (!(Test-Path -Path "layouts\snippet")) {
  New-Item -Path "layouts\snippet" -ItemType Directory
}

#
# layouts/snippet/cc-inline.html (create)
#
Set-Content -Path "layouts\snippet\cc-inline.html" -Value @'
{{ $snippet := .Params.snippet | default .Params.title | markdownify -}}
<span class="cc-inline cc-snippet-inline">
    {{ if .Params.from -}}
    <span class="cc-snippet">{{ $snippet }}</span>
    <a class="cc-url" href="{{ .Permalink }}">{{ .Params.from }}</a>
    {{ else -}}
    <a class="cc-url" href="{{ .Permalink }}">
        <span class="cc-snippet">{{ $snippet }}</span>
    </a>
    {{ end }}
</span>
'@

#
# layouts/spoken/ (create)
#
If (!(Test-Path -Path "layouts\spoken")) {
  New-Item -Path "layouts\spoken" -ItemType Directory
}

#
# layouts/spoken/cc-inline.html (create)
#
Set-Content -Path "layouts\spoken\cc-inline.html" -Value @'
<span class="cc-inline cc-spoken-inline">
    <audio class="cc-spoken" controls src="{{ .Params.spoken }}">	
    <a class="cc-url" href="{{ .Permalink }}">{{ .Params.title }}</a>
</span>
'@

#
# static/ (recreate)
#
If (Test-Path -Path "static") {
  Remove-Item -Path "static" -Recurse -Force
}
New-Item -Path "static" -ItemType Directory

#
# static/favicon/ (move from assets)
#
Move-Item -Path "assets\favicon" -Destination "static\favicon"

#
# static/favicon.ico (copy for root of website)
#
Move-Item -Path "favicon.ico" -Destination "static\favicon.ico"