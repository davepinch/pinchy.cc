
#
# Script to migrate from Jekyll to Hugo
#
# - Stop the Hugo server before running this script.
# - Run this script from the root of the project.
# - Since files get deleted, you must run revert.ps1 instead of running this script twice.
#
# Thanks to the following sites for documentation and tips:
#
# https://gohugo.io/
# https://www.stackbit.com/blog/advanced-hugo-templates
# https://www.regisphilibert.com/blog/2018/04/hugo-optmized-relationships-with-related-content/

#
# .gitignore (overwrite)
#
Set-Content -Path ".gitignore" -Value @'
.hugo_build.lock
/resources/
'@

#
# _config.yml (delete)
#
If (Test-Path -Path "_config.yml") {
  Remove-Item -Path "_config.yml"
}

#
# _layouts/ (delete)
#
If (Test-Path -Path "_layouts") {
  Remove-Item -Path "_layouts" -Recurse -Force
}


#
# _sass/ (move to assets/sass)
#
if (Test-Path -Path "_sass") {
  if (Test-Path -Path "assets\sass") {
    if (!(Get-ChildItem -Path "assets\sass")) {
      Remove-Item -Path "assets\sass"
    }
  }
  Move-Item -Path "_sass" -Destination "assets\sass"
}

#
# _site/ (delete)
#
If (Test-Path -Path "_site") {
  Remove-Item -Path "_site" -Recurse -Force
}

#
# assets/camera-roll/**/*_thumbnail.jpg (delete)
#
# In the assets/camera-roll directory, delete all files that end with _thumbnail.jpg
#
#Get-ChildItem -Path "assets\camera-roll" -Filter "*-thumbnail.jpg" -Recurse | ForEach-Object {
#  $file = $_
#  Remove-Item -Path $file.FullName
#}

#
# assets/css/style.scss (delete)
#
If (Test-Path -Path "assets\css\styles.scss") {
  Remove-Item -Path "assets\css\styles.scss"
}

#
# assets/css/ (delete if empty)
#
if (Test-Path -Path "assets\css") {
  if (!(Get-ChildItem -Path "assets\css")) {
    Remove-Item -Path "assets\css"
  }
}


#
# collections/ (rename to content)
#
if (Test-Path -Path "collections") {
  if (Test-Path -Path "content") {
    if (!(Get-ChildItem -Path "content" -Recurse -File)) {
      Remove-Item -Path "content" -Recurse -Force
    }
  }

  Move-Item -Path "collections" -Destination "content"
}

#
# content/_* (remove prefix)
#
# In the content directory, rename each subdirectory that has an
# understore prefix to remove the underscore
Get-ChildItem -Path "content" -Directory | ForEach-Object {
  $dir = $_
  if ($dir.Name.StartsWith("_")) {
    $newName = $dir.Name.Substring(1)
    Rename-Item -Path $dir.FullName -NewName $newName
  }
}

#
# content/*.md (replace permalink with url)
#
Get-ChildItem -Path "content" -Filter "*.md" -Recurse | ForEach-Object {
  $file = $_
  $content = Get-Content -Path $file.FullName
  $content = $content -replace "permalink: ", "url: "
  Set-Content -Path $file.FullName -Value $content
} 


#
# content/_index.md (create)
#
Set-Content -Path "content/_index.md" -Value @"
---
title: "pinchy.cc"
---
hello world
"@

#
# content/camera-roll/**/.md (rename index files and move assets)
#
(Get-ChildItem -Path "content\camera-roll" -Filter "*.md" -Recurse) | ForEach-Object {
  
  $file = $_

  # load the file as a string
  $content = Get-Content -Path $file.FullName

  # remove full asset paths as later assets will be moved to this folder
  #
  # Example:
  #   picture: /assets/camera-roll/2020/2020-01-01-foo-bar.jpg
  # becomes
  #   picture: 2020-01-01-foo-bar.jpg
  #
  $content = $content -replace "picture: .*\/", "picture: "
  $content = $content -replace "thumbnail: .*\/", "thumbnail: "
  Set-Content -Path $file.FullName -Value $content

  # Convert index files
  if ($file.BaseName -eq $file.Directory.BaseName) {
    
    Rename-Item -Path $file.FullName -NewName "index.md"

    # Define a string that matches the old directory except \content\ is replaced with \assets\
    $assetDir = $file.DirectoryName -replace "content", "assets"

    # Move all files from the asset directory to the new directory
    Move-Item -Path "$assetDir\*" -Destination $file.DirectoryName

    # Delete the old asset directory
    Remove-Item -Path $assetDir
  }
}

#
# _pages/404.md (delete)
#
if (Test-Path -Path "_pages\404.md") {
  Remove-Item -Path "_pages\404.md"
}

#
# _pages/ (delete)
#
if (Test-Path -Path "_pages") {
  if (!(Get-ChildItem -Path "_pages")) {
    Remove-Item -Path "_pages"
  }
}

#
# Gemfile (delete)
# 
If (Test-Path -Path "Gemfile") {
  Remove-Item -Path "Gemfile"
}

#
# Gemfile.lock (delete)
#
If (Test-Path -Path "Gemfile.lock") {
  Remove-Item -Path "Gemfile.lock"
}

#
# go.mod (create)
#
Set-Content -Path "go.mod" -Value @"
module github.com/davepinch/pinchy.cc
go 1.21
"@

#
# hugo.yaml (create)
#
Set-Content -Path "hugo.yaml" -Value @'
baseURL: https://pinchy.cc/
defaultContentLanguage: en
disableKinds:
  # Disable taxonomy pages generated by Hugo for tags and categories
  - taxonomy
  - term
permalinks:
  about: /:filename/
  camera-roll: /:slug/  
  cues: /:filename/
  fragments: /:filename/
  generative-works: /:filename/
  reality-checks: /:filename/
  spoken: /:filename/
  tasks: /:filename/
  topics: /:filename/
'@

#
# layouts/ (create)
#
If (!(Test-Path -Path "layouts")) {
  New-Item -Path "layouts" -ItemType Directory
}

#
# layouts/_default/ (create)
#
If (!(Test-Path -Path "layouts\_default")) {
  New-Item -Path "layouts\_default" -ItemType Directory
}

#
# layouts/_default/baseof.html (create)
#
Set-Content -Path "layouts\_default\baseof.html" -Value @'
<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="utf-8">
 <meta name="viewport" content="width=device-width, initial-scale=1">
 <title>{{ .Page.Title }}</title>
 {{ $style := resources.Get "sass/cc.scss" | resources.ToCSS | resources.Minify }}
 <link rel="stylesheet" href="{{ $style.Permalink }}">
 <link rel="shortcut icon" type="image/x-icon" href="/favicon/favicon.ico"/>
</head>
<body>
 {{ block "main" . }}
 {{ end }}
 {{ partial "footer.html" . }}
</body>
</html>
'@

#
# layouts/_default/card.html (create)
#
Set-Content -Path "layouts\_default\card.html" -Value @'
<article class="cc-card cc-{{ .Type }}-card">
    <a class="cc-url" href="{{ .Permalink }}"><span class="cc-title">{{ .Params.title }}</span></a>
</article>
'@

#
# layouts/_default/chip.html (create)
#
Set-Content -Path "layouts\_default\chip.html" -Value @'
<span class="cc-chip cc-{{ .Type }}-chip">
    <a class="cc-url" href="{{ .Permalink }}"><span class="cc-title">{{ .Params.title }}</span></a>
</span>
'@

#
# layouts/_default/debug.html (create)
#
Set-Content -Path "layouts\_default\debug.html" -Value @'
<h2>Debug</h2>
<table>
    {{ range $k, $v := .Params -}}
    <tr>
      <th>{{ $k }}</th>
      <th>{{ (printf "%T" $v) }}</th>
      <td>{{ $v }}</td>
    </tr>
    {{- end }}
</table>
'@

#
# layouts/_default/heading.html (create)
#
Set-Content -Path "layouts\_default\heading.html" -Value @'
<h2 class="cc-heading cc-{{ .Type }}-heading">
    <span class="cc-title">{{ .Params.title }}</span>
</h2>
'@

#
# layouts/_default/home.html (create)
#
Set-Content -Path "layouts\_default\home.html" -Value @'
{{ define "main" }}
{{ .Content }}

<ul>
{{ $pages := .Site.RegularPages -}}
{{ $pages = $pages | shuffle | first 13 -}}
{{ range $pages }}
    <li>{{- .Render "card" -}}</li>
{{ end -}}
</ul>

{{ end }}
'@


#
# layouts/_default/list.html (create)
#
Set-Content -Path "layouts\_default\list.html" -Value @'
{{ define "main" }}
{{ .Content }}
{{ end }}
'@

#
# layouts/_default/masthead.html (create)
#
Set-Content -Path "layouts\_default\masthead.html" -Value @'
<header class="cc-masthead cc-{{ .Type }}-masthead">
  <h1 class="cc-title">{{ .Params.title }}</h1>
  {{ with .Params.website -}}
  <a href="{{ . }}" class="cc-website">{{ . }}</a>
  {{- end }}  
</header>
'@

#
# layouts/_default/single.html (create)
#
Set-Content -Path "layouts\_default\single.html" -Value @'
{{ define "main" }}
{{ .Render "masthead" }}
{{ .Content }}

{{ with .Params.snippets }}
  {{ partial "fallback-heading" "Snippets" }}
  {{ range . }}
    {{ partial "snippet" . }}
  {{ end }}
{{ end }}

{{ $skip := slice
    "attribution"
    "date"
    "draft"
    "hashtag"
    "iscjklanguage"
    "lastmod"
    "picture"
    "publish"
    "publishdate"
    "published"
    "quote"
    "snippets"
    "thumbnail"
    "title"
    "type"
    "url"
    "website" -}}

{{ range $k, $v := .Params -}}
  {{ if not (in $skip $k) -}}    
    {{ partial "fallback-heading.html" $k }}
    {{ partial "chip-list-for.html" $v }}
  {{ end -}}
{{- end }}

{{ end }}
'@

#
# layouts/404.html (create)
#
Set-Content -Path "layouts\404.html" -Value @'
{{ define "main" }}
<p>Sorry, but this page hasn't been constructed yet.</p>
<a href='{{ "" | relURL }}'>Go Home</a>
{{ end }}
'@

#
# layouts/partials/ (create)
#
If (!(Test-Path -Path "layouts\partials")) {
  New-Item -Path "layouts\partials" -ItemType Directory
}

#
# layouts/partials/chip-for.html (create)
#
Set-Content -Path "layouts\partials\chip-for.html" -Value @'
{{ with partial "resolve-title.html" . }}
{{ .Render "chip"}}
{{ else }}
{{ partial "fallback-chip.html" . }}
{{ end }}
'@

#
# layouts/partials/chip-list-for.html (create)
#
Set-Content -Path "layouts\partials\chip-list-for.html" -Value @'
{{ $literals := slice "bool" "string" }}
{{ $type := (printf "%T" .) }}
<ul>
{{ if in $literals $type }}
  <li>{{ partial "chip-for.html" .}}</li>
{{ else if eq $type "[]string" }}
  {{ range . }}
  <li>{{ partial "chip-for.html" .}}</li>
  {{ end }}
{{ end }}
</ul>
'@

#
# layouts/partials/fallback-card.html (create)
#
Set-Content -Path "layouts\partials\fallback-card.html" -Value @'
<article class="cc-card cc-fallback-card">
    <span class="cc-title">{{ . }}</span>
</article>
'@

#
# layouts/partials/fallback-chip.html (create)
#
Set-Content -Path "layouts\partials\fallback-chip.html" -Value @'
<span class="cc-chip cc-fallback-chip">
    <span class="cc-title">{{ . }}</span>
</span>
'@

#
# layouts/partials/fallback-heading.html (create)
#
Set-Content -Path "layouts\partials\fallback-heading.html" -Value @'
<h2 class="cc-heading cc-fallback-heading">
    <span class="cc-title">{{ . }}</span>
</h2>
'@

#
# layouts/partials/footer.html (create)
#
Set-Content -Path "layouts\partials\footer.html" -Value @'
<hr />
<footer class="cc-footer">
  <menu>
    <li>
      <a href="/index.html">home</a>
    </li>
    <li>
      <a href="/about-me/">about</a>
    </li>
    <li>
      <a href="/privacy-policy/">privacy</a>
    </li>
  </menu>
</footer>
'@

#
# layouts/partials/resolve-property.html (create)
#
Set-Content -Path "layouts\partials\resolve-property.html" -Value @'
{{ return index (where site.RegularPages "Params.hashtag" .) 0 }}
'@

#
# layouts/partials/resolve-title.html (create)
#
Set-Content -Path "layouts\partials\resolve-title.html" -Value @'
{{ $title := . }}
{{ return index (where site.RegularPages "Title" $title) 0 }}
'@

#
# layouts/partials/snippet.html (create)
#
Set-Content -Path "layouts\partials\snippet.html" -Value @'
<article class="cc-snippet">
    <q>{{ .snippet | markdownify }}</q>
    {{ with .tags }}
    <footer>
        <ul class="cc-tag-list">
        {{ range . }}
            <li>{{ partial "chip-for.html" . }}</li>
        {{ end }}
        </ul>
    </footer>
    {{ end }}
</article>
'@


#
# layouts/picture/ (create)
#
If (!(Test-Path -Path "layouts\picture")) {
  New-Item -Path "layouts\picture" -ItemType Directory
}

#
# layouts/picture/masthead.html (create)
#
Set-Content -Path "layouts\picture\masthead.html" -Value @'
<header class="cc-masthead cc-picture-masthead">
  {{ $image := .Resources.Get .Params.picture -}}
  {{ if $image -}}
  <img class="cc-picture"
       src="{{ $image.RelPermalink }}"
       title="{{ .Params.title }}"
       width="100%" />
  {{- end }}
  <h1 class="cc-title">{{ .Params.title }}</h1>
</header>
'@


#
# layouts/quote/ (create)
#
If (!(Test-Path -Path "layouts\quote")) {
  New-Item -Path "layouts\quote" -ItemType Directory
}

#
# layouts/quote/chip.html (create)
#
Set-Content -Path "layouts\quote\chip.html" -Value @'
{{ $quote := .Params.quote | default .Params.title }}
{{ $marks := hasPrefix $quote '"' }}
<span class="cc-chip cc-{{ .Type }}-chip">
    <a class="cc-url" href="{{ .Permalink }}">
        <q class="cc-quote{{ if not $marks }} cc-missing-quotes{{end}}">{{ $quote }}</q>
    </a>
</span>
'@

#
# layouts/quote/masthead.html (create)
#
Set-Content -Path "layouts\quote\masthead.html" -Value @'
{{ $quote := .Params.quote | default .Params.title }}
{{ $marks := hasPrefix $quote '"' }}
<header class="cc-masthead cc-{{ .Type }}-masthead">
  <blockquote>
    <p class="cc-quote{{ if not $marks }} cc-missing-quotes{{end}}">{{ $quote }}</p>
    {{ with .Params.attribution -}}
    <footer class="cc-attribution">
      {{ . | markdownify }}
    </footer>
    {{- end }}
  </blockquote>
</header>
'@

#
# static/ (recreate)
#
If (Test-Path -Path "static") {
  Remove-Item -Path "static" -Recurse -Force
}
New-Item -Path "static" -ItemType Directory

#
# static/favicon/ (move from assets)
#
Move-Item -Path "assets\favicon" -Destination "static\favicon"

#
# static/favicon.ico (copy for root of website)
#
Move-Item -Path "favicon.ico" -Destination "static\favicon.ico"